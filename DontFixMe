------------======[ read & fix top to bottom ]======------------

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%-% BUGS %-%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
>> !!! INFINTE LOOP !!! <<
Open code for any method in any class to get BM stuck!

>> !!! JVM COMPATIBILITY !!! <<
*Writing class*: the result is not recognizable by
Java Virtual Machine.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%-%%%%%%%%-%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

TODO: fill all renamed 'JavaXxx' with original code.
FILL AND TEST METHODS IN ConstantPoolXxx.

>> (0.6.0d2) <<
&code&cleanup&:
CONSTANT REF RESOLVERS -- unite them somewhere (ConstantPoolXxx, JavaConstantPool???)
(too much code like 'if pool != null else return "* unknown (ref#) *")

Convert ConstantPoolFrame and CodeEditorFrame into customizers!
Enclose instruction editor, constant editor as INNER CLASSES in new editors.

@see_also TO CORRECT
Editing constant pool: you edit constant, but only THIS ONE constant 
changes inside Pool Window. To see all changes, reopen Constant Pool Window.

^^^^^^^^^^^^^^^^
JavaMethod.getInstructionsAsBlock() instead of getInstructions() is used
to get instructions and edit method's code.
^^^^^^^^^^^^^^^^
!!! Temporary files are not used anymore for storing methods.

OPTIMIZE:
if ((a == b) || (b == a) || (a == b) ...)  --->  if (a == b)

----------------------------------------------------------------
>> NEW code-based ENGINE! (0.6.0d1) <<
*** update to match new engine! ***

&&& NEVER STORE INSTRUCTIONS WITHIN THE METHOD!!! &&&

DEALING WITH 'instructions' IN 'for' LOOPS: REPLACE WITH DEALING WITH 'code' IN 'while' LOOPS
(possible PROBLEM: StackCalculator requires deref-ed constants and args for 'invokexxx')

calculateNextPC ---> nextOpcodeIndex
calculatePreviousPC ---> previousOpcodeIndex

JVMInstructionSet contains its CODE, not a real instructions!
(might be easily converted to/from using CodeTransform)

REWRITE ALL (not only 'protected static void calculateCodeBlock(...)')
in Stack & LocalVars Calculator.

++++++++++++++++++
USE NEW METHOD:
search for blocks with a constant stack fill (0 or 1, if something have
pushed val and not popped very long),
blocks with if push 1 else push 2 (multi-val) stacks.
++++++++++++++++++

++	Teach *main calculator methods* in 'StackCalculator' to act as
	countMaxStack, it works perfectly!
++	Code flow -> block analyzers/converters can also learn something here.

----------------------------------------------------------------------------
- *** Try to decompile java.awt.Component - you'll get a lot of errors *** -
----------------------------------------------------------------------------

-4. All attribute reads/writes must be thru plug-ins.
	View->***Attributes*** window: interacts with attribute support plug-ins.
	
-3. may add to JavaConstantPoolElement "referenceCount" field?
	if 1, it can be freely changed.
	if 0, it may be freely removed.
	if >1, when modify, copy and then change this copy.
	(but if refs to class_name and constructor_method_name - always
	(MUST BE) the same, do not copy!!!)
	
-2. make 'Cleaning Up...' an icon. Use class "IconWindow" or such to display it.

-1. ADD 'xxxswitch' bytecodes handling for BytecodeLocksmith and everywhere.
	
0.	Methods 'getMaxStack()' and 'getMaxLocals()' is called very intensively
	from classes like CodeEditorFrame (JVMInstructionSetEditor)!!!
	
1.	Add to each stack value all its pusher PCs.
	(Use 'SpecialStack' instead of 'ExpandableStack')
	
2.	Calculate STACK VALUES only for every 10th pc value (0th, 9th, 19th, etc.)
	Calculate in-between values only if needed.
	
3.	Make LocalVarsCalculator, StackCalculator with its services MULTI-THREADED
	(WRITE CLASSES LocalVarsCalculatorThread & StackCalculatorThread)
	
4.	IMPLEMENT Options->Verify...
	1) Stack frames are destroyed correctly (empty with 'return').
	
5.	missing: constant, field, and method DELETION
	missing: constant, field, and method ADDITION
	
	*!* (BUG: to get it, choose Constants->Add Constant for newly created class,
	and then change tag to Stringref.)
	
	*!* (BUG: if you 'REMOVE METHOD...' it is not disappeared from MethodsFrame,
	menu, etc. Remove 'init()', wait ~5 seconds, and get 'setName(boolean)', 
	which is the next method.)
	
6.	IMPLEMENT good Local Variable type finder:
	(use Stack to determine xstore's type - SpecialStack can help!)
	•	look for "!!! THIS METHOD DOESN'T WORK PERFECTLY !!!" in comments
	•	use arrays (include 'new String[][] { { "" }, { "" } }' etc.)
	•	Not only ONE [3]rd slot in one method (with different scopes, of course).
		calculate All, ALL, A!L!L! of them (with _start_pc_, _end_pc_ etc.)
		it might be 'jvm_ret_addr' [2] and [3] at the top of method,
		but below, they are changed to [2] int, [3, 4] double

7.	implement in >> JavaSourceBlock << : search for end of block (use start of block).
	currently implemented for: switches, simple (just rets last pc, improve for loc vars etc.).
	
8.	GOOD BEANOISITY of JavaMethod, JavaClass, JavaConstantPool etc.

9.	Don't update each item at every moment.
	For example, type "sjshdghf" quickly at method's ret type text field,
	to get a lot of changes in constant pool. (Very slow for big pools!)
	>>> use some thread to avoid it

